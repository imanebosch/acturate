name: Manual PyPI Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. 1.2.3)"
        required: true

env:
  PACKAGE_NAME: "acturate"

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install tomli
        run: pip install tomli

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml'))['project']['version'])")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Extract tag and Details
        id: release
        run: |
          TAG_NAME="${{ github.event.inputs.tag }}"
          # Validate tag format: must be like 1.2.3-release or 1.2.3-beta
          if [[ ! "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+-(release|beta)$ ]]; then
            echo "Error: Tag '$TAG_NAME' does not match the required format: <major>.<minor>.<patch>-(release|beta)"
            exit 1
          fi
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | awk -F'-' '{print $2}')
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Validate tag == version
        run: |
          if [ "${{ github.event.inputs.tag }}" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "ERROR: Tag '${{ github.event.inputs.tag }}' does not match pyproject.toml version '${{ steps.get_version.outputs.version }}'"
            exit 1
          fi

  check_pypi:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Check if version exists on PyPI
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          PACKAGE=${{ env.PACKAGE_NAME }}
          echo "Checking if $VERSION of $PACKAGE exists on PyPI..."
          response=$(curl -s https://pypi.org/pypi/${PACKAGE}/json || echo "{}")
          if echo "$response" | jq -e --arg v "$VERSION" '.releases[$v]' > /dev/null; then
            echo "Version $VERSION already exists on PyPI."
            exit 1
          else
            echo "Version $VERSION does not exist on PyPI. Proceeding."
          fi

  build:
    needs: [validate, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build

      - name: Build package
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.event.inputs.tag }} dist/* \
            --title "Release ${{ github.event.inputs.tag }}" \
            --generate-notes
